require('dotenv').config();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:');
  console.error(error);
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤
  console.error('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:');
  console.error(error.stack);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
  try {
    const fs = require('fs');
    const path = require('path');
    const errorLogDir = path.join(__dirname, 'logs');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(errorLogDir)) {
      fs.mkdirSync(errorLogDir, { recursive: true });
    }
    
    const now = new Date();
    const errorLogPath = path.join(errorLogDir, `error-${now.toISOString().replace(/:/g, '-')}.log`);
    
    const errorInfo = `
====== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ======
–í—Ä–µ–º—è: ${now.toISOString()}
–¢–∏–ø: ${error.name}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}
–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:
${error.stack}
============================
`;
    
    fs.writeFileSync(errorLogPath, errorInfo);
    console.error(`–ñ—É—Ä–Ω–∞–ª –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${errorLogPath}`);
  } catch (logError) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–∫–∏:', logError);
  }
  
  // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —É–ø–∞—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑-–∑–∞ –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏
  // –ù–æ –º—ã –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
  console.error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:');
  console.error('Promise:', promise);
  console.error('–ü—Ä–∏—á–∏–Ω–∞:', reason);
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
  try {
    const fs = require('fs');
    const path = require('path');
    const errorLogDir = path.join(__dirname, 'logs');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(errorLogDir)) {
      fs.mkdirSync(errorLogDir, { recursive: true });
    }
    
    const now = new Date();
    const errorLogPath = path.join(errorLogDir, `unhandled-${now.toISOString().replace(/:/g, '-')}.log`);
    
    let reasonStr = '';
    if (reason instanceof Error) {
      reasonStr = `${reason.name}: ${reason.message}\n${reason.stack}`;
    } else {
      reasonStr = String(reason);
    }
    
    const errorInfo = `
====== UNHANDLED PROMISE REJECTION ======
–í—Ä–µ–º—è: ${now.toISOString()}
–ü—Ä–∏—á–∏–Ω–∞:
${reasonStr}
============================
`;
    
    fs.writeFileSync(errorLogPath, errorInfo);
    console.error(`–ñ—É—Ä–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${errorLogPath}`);
  } catch (logError) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∂—É—Ä–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', logError);
  }
});

const db = require('./db');
const tgBot = require('./tg-bot');
const cron = require('./cron');
const selfPing = require('./self-ping');
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
app.use(bodyParser.json());

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function startApp() {
  try {
    console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await db.initDatabase();
    
    // –ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...');
    db.scheduleBackups(24, 7); // —Ä–∞–∑ –≤ –¥–µ–Ω—å, —Ö—Ä–∞–Ω–∏—Ç—å 7 –¥–Ω–µ–π
    
    // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    console.log('–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    const utils = require('./utils');
    utils.monitoring.startMonitoring(300000); // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ VK
    if (process.env.ENABLE_VK_SYNC === 'true') {
      console.log('–í–∫–ª—é—á–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ VK');
      utils.scheduleUsersSync(6); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    } else {
      console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ VK –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    }
    
    // –ó–∞–ø—É—Å–∫ –í–ö –±–æ—Ç–∞
    console.log('–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞...');
    console.log('resolved vk-bot', require.resolve('./vk-bot'));

    const vkBotModule = require('./vk-bot');
    console.log('=== –≠–∫—Å–ø–æ—Ä—Ç vk-bot ===', vkBotModule);

    if (typeof vkBotModule.startVkBot === 'function') {
      await vkBotModule.startVkBot();
    } else {
      console.error('startVkBot –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äì VK-–±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    }
    
    // –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    console.log('–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    await tgBot.startTgBot();
    
    // –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...');
    cron.scheduleDailyCheck();
    
    // –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...');
    cron.scheduleWeeklyCleanup();
    
    // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–ø–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è
    console.log('–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–ø–∏–Ω–≥–∞...');
    selfPing.startSelfPing();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const fs = require('fs');
    const path = require('path');
    const logsDir = path.join(__dirname, 'logs');
    if (!fs.existsSync(logsDir)) {
      fs.mkdirSync(logsDir, { recursive: true });
      console.log('–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤:', logsDir);
    }
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ –≤ –ª–æ–≥
    const startupInfo = `
====== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ======
–í—Ä–µ–º—è: ${new Date().toISOString()}
–í–µ—Ä—Å–∏—è Node: ${process.version}
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}
Uptime: ${process.uptime()} —Å–µ–∫
============================
`;
    
    fs.writeFileSync(path.join(logsDir, `startup-${new Date().toISOString().replace(/:/g, '-')}.log`), startupInfo);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
    try {
      const tgBot = require('./tg-bot');
      if (tgBot && typeof tgBot.sendDailyStatusReport === 'function') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        setTimeout(() => {
          tgBot.sendDailyStatusReport();
        }, 60000); // 1 –º–∏–Ω—É—Ç–∞
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', e);
    }

    console.log('–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞')
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ –ª–æ–≥
    try {
      const fs = require('fs');
      const path = require('path');
      const logsDir = path.join(__dirname, 'logs');
      
      if (!fs.existsSync(logsDir)) {
        fs.mkdirSync(logsDir, { recursive: true });
      }
      
      const errorInfo = `
====== –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê ======
–í—Ä–µ–º—è: ${new Date().toISOString()}
–¢–∏–ø: ${error.name}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}
–°—Ç–µ–∫:
${error.stack}
============================
`;
      
      fs.writeFileSync(path.join(logsDir, `startup-error-${new Date().toISOString().replace(/:/g, '-')}.log`), errorInfo);
    } catch (logError) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞:', logError);
    }
    
    process.exit(1);
  }
}
// VK Callback API confirmation
app.post('/', (req, res) => {
  if (req.body.type === 'confirmation') {
    const confirmCode = process.env.VK_CONFIRMATION_CODE;
    if (!confirmCode) {
      console.error('VK_CONFIRMATION_CODE –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
      return res.status(500).send('env error');
    }
    res.status(200).send(confirmCode);
  } else {
    res.status(200).send('ok');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ GET / ‚Äî –Ω—É–∂–µ–Ω –¥–ª—è keep-alive
app.get('/', (req, res) => {
  res.status(200).send('ok');
});

// –î–ª—è AMVERA –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 80, –∏–Ω–∞—á–µ 3000
const PORT = process.env.NODE_ENV === 'production' ? 80 : (process.env.PORT || 3000);
app.listen(PORT, () => {
  console.log('Express server for VK Callback API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', PORT);
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Glitch –Ω–µ –∑–∞—Å—ã–ø–∞–ª
  startKeepAlive();
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startApp();

// --------------------------------------------------------------
// –£–ª—É—á—à–µ–Ω–Ω—ã–π Keep-alive: –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –≤ Glitch
// --------------------------------------------------------------
function startKeepAlive() {
  console.log('üîÑ Keep-alive: –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
  
  // –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
  const fs = require('fs');
  const path = require('path');
  
  // 1. –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π URL (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç)
  const baseInterval = Number(process.env.KEEP_ALIVE_INTERVAL_MS) || 270000; // ~4.5 –º–∏–Ω—É—Ç—ã
  
  // 2. –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const fsInterval = 150000; // 2.5 –º–∏–Ω—É—Ç—ã
  
  // 3. –õ–µ–≥–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è CPU –∞–∫—Ç–∏–≤–Ω—ã–º
  const cpuInterval = 180000; // 3 –º–∏–Ω—É—Ç—ã
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  const stats = {
    totalActivities: 0,
    fileActivities: 0,
    cpuActivities: 0,
    httpActivities: 0
  };
  
  // –ì–ª–∞–≤–Ω—ã–π ping: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π endpoint
  setInterval(() => {
    try {
      const domain = process.env.PROJECT_DOMAIN;
      if (domain) {
        const url = `https://${domain}.glitch.me/`;
        console.log(`üëã Keep-alive: —Å–∞–º–æ–ø–∏–Ω–≥ ${url}`);
        
        const httpLib = require('https');
        const req = httpLib.get(url, { timeout: 10000 }, (res) => {
          if (res.statusCode === 200) {
            stats.httpActivities++;
            console.log('‚úÖ Keep-alive: —Å–∞–º–æ–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω');
          }
          res.on('data', () => {});
          res.on('end', () => {});
        });
        
        req.on('error', (err) => {
          console.log(`‚ÑπÔ∏è Keep-alive: –æ—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è): ${err.message}`);
        });
        
        req.on('timeout', () => {
          req.abort();
        });
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–∞–º–æ–ø–∏–Ω–≥–∞, –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
      console.log(`‚ÑπÔ∏è Keep-alive: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–º–æ–ø–∏–Ω–≥–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è): ${error.message}`);
    }
    
    stats.totalActivities++;
  }, baseInterval);
  
  // –ú–µ—Ç–æ–¥ 2: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const fsKeepAlive = () => {
    try {
      const tmpDir = path.join(__dirname, 'tmp');
      if (!fs.existsSync(tmpDir)) {
        fs.mkdirSync(tmpDir, { recursive: true });
      }
      
      const keepAliveFile = path.join(tmpDir, 'keep-alive.txt');
      const timestamp = new Date().toISOString();
      fs.writeFileSync(keepAliveFile, `Keep-alive: ${timestamp}\n`);
      
      stats.fileActivities++;
    } catch (error) {
      console.log(`‚ÑπÔ∏è Keep-alive FS: –æ—à–∏–±–∫–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è): ${error.message}`);
    }
  };
  
  // –ú–µ—Ç–æ–¥ 3: CPU –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ª–µ–≥–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
  const cpuKeepAlive = () => {
    try {
      const startTime = Date.now();
      // –ù–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è CPU –∞–∫—Ç–∏–≤–Ω—ã–º
      let sum = 0;
      for (let i = 0; i < 100000; i++) {
        sum += Math.random() * i;
      }
      const duration = Date.now() - startTime;
      stats.cpuActivities++;
    } catch (error) {
      console.log(`‚ÑπÔ∏è Keep-alive CPU: –æ—à–∏–±–∫–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è): ${error.message}`);
    }
  };
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  setInterval(fsKeepAlive, fsInterval);
  setInterval(cpuKeepAlive, cpuInterval);
  
  // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  setTimeout(fsKeepAlive, 2000);
  setTimeout(cpuKeepAlive, 5000);
  
  // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  setInterval(() => {
    console.log(`[Keep-alive —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞] –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${stats.totalActivities}, —Ñ–∞–π–ª–æ–≤—ã—Ö: ${stats.fileActivities}, CPU: ${stats.cpuActivities}, HTTP: ${stats.httpActivities}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
    try {
      const utils = require('./utils');
      if (utils && utils.monitoring) {
        utils.monitoring.updateServiceStatus('keepAlive', true);
      }
    } catch (error) {
      console.log(`‚ÑπÔ∏è Keep-alive: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
    }
  }, 1800000); // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
  try {
    const utils = require('./utils');
    if (utils && utils.monitoring) {
      utils.monitoring.updateServiceStatus('keepAlive', true);
    }
  } catch (error) {
    console.log(`‚ÑπÔ∏è Keep-alive: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
  }
} 